// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package location

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LocationInternalClient is the client API for LocationInternal service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LocationInternalClient interface {
	GetUserByUsername(ctx context.Context, in *GetUserByUsernameRequest, opts ...grpc.CallOption) (*User, error)
}

type locationInternalClient struct {
	cc grpc.ClientConnInterface
}

func NewLocationInternalClient(cc grpc.ClientConnInterface) LocationInternalClient {
	return &locationInternalClient{cc}
}

func (c *locationInternalClient) GetUserByUsername(ctx context.Context, in *GetUserByUsernameRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/proto.LocationInternal/GetUserByUsername", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LocationInternalServer is the server API for LocationInternal service.
// All implementations must embed UnimplementedLocationInternalServer
// for forward compatibility
type LocationInternalServer interface {
	GetUserByUsername(context.Context, *GetUserByUsernameRequest) (*User, error)
	mustEmbedUnimplementedLocationInternalServer()
}

// UnimplementedLocationInternalServer must be embedded to have forward compatible implementations.
type UnimplementedLocationInternalServer struct {
}

func (UnimplementedLocationInternalServer) GetUserByUsername(context.Context, *GetUserByUsernameRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByUsername not implemented")
}
func (UnimplementedLocationInternalServer) mustEmbedUnimplementedLocationInternalServer() {}

// UnsafeLocationInternalServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LocationInternalServer will
// result in compilation errors.
type UnsafeLocationInternalServer interface {
	mustEmbedUnimplementedLocationInternalServer()
}

func RegisterLocationInternalServer(s grpc.ServiceRegistrar, srv LocationInternalServer) {
	s.RegisterService(&LocationInternal_ServiceDesc, srv)
}

func _LocationInternal_GetUserByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationInternalServer).GetUserByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LocationInternal/GetUserByUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationInternalServer).GetUserByUsername(ctx, req.(*GetUserByUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LocationInternal_ServiceDesc is the grpc.ServiceDesc for LocationInternal service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LocationInternal_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.LocationInternal",
	HandlerType: (*LocationInternalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserByUsername",
			Handler:    _LocationInternal_GetUserByUsername_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "location_internal.proto",
}
